 package Assignment;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Scanner;

public class Rocket {

    private int[] payload;

    public Rocket(int[] randomArr) {
        payload = randomArr;

    }

    /* DEBUG
    public static void main(String[] args) {
        //payload = payloadArr();
        //System.out.println("Created payload is :: " + Arrays.toString(payload));
        //System.out.println("The sum weight of payload is ::" + getLaunchWeight());
        //System.out.println("The average weight of payload is ::" + getAverageWeight());
        //System.out.println("The maximum weight of the payload is ::" + getMaxWeight());
        //System.out.println("The minimum weight of the payload is ::" + getMinWeight());
        printCountDown(countdownInput());

    }

     */


    // Collects the integer for input to be used in printCountdown provided the input is bigger than 1
    // TODO: See if its possible to re-enter the loop if a letter/string/char is entered.
    public int countdownInput(){
        int cdNumber = -1;
        while(!(cdNumber>1) || cdNumber != (int)cdNumber){ //todo partially completed: check if a number smaller than 1 is entered (DONE)
            System.out.println("Please input a time bigger than one: ");
            Scanner s = new Scanner(System.in);
            cdNumber = s.nextInt();
            if (!(cdNumber>1)){
                System.out.println("Invalid Time!");
            }
        }

        return cdNumber;
    }

    //should take in an int (but I thought having the countdownInput made things simpler) and counts down from the given number to 1 and prints lift off
    public void printCountDown(int countDown){

        for (int i = countDown; i >= 1; i--) {
            System.out.println(i);
        }
        System.out.println("Lift Off!");    // we are only counting down to 1, because in order for the for loop to finish it must be equal to 1
                                                // therefore the next value would be 0, and we would have lift off and we have no need to print 0.
    }

    /* FOR DEBUGGING */
    /*
    public static int[] payloadArr(){

        ArrayList<Integer> list = new ArrayList<>();
        Scanner s = new Scanner(System.in);

        System.out.println("To exit the element input, input a letter and press enter!");
        System.out.println("Enter the elements of the array: ");
        //We can continuously enter ints until we encounter an input that is not, because of the nextInt boolean
        //when it is not an int, boolean returns false and we exit the while loop
        while (s.hasNextInt()){
            list.add(s.nextInt());
        }

        //payload = elements; we assigning the values from arraylist to payload array
        payload = new int[list.size()];
        for (int i = 0; i < list.size(); i++) {
            payload[i] = list.get(i);
        }

        return payload;
    }

     */

    // returns sum of the payload array index and assigns it to payload sum which we return
    public int getLaunchWeight(){

        int payloadSum = 0;
        for (int i : payload) {
            payloadSum += i;
        }

        return payloadSum;
    }

    //Calling getLaunchWeight and dividing it by payload index (number of elements in the array) and return the variable assigned
    //TODO: This is bad because it is coupled with getLaunchWeight (but its neat)
    public double getAverageWeight(){

        /*  -- This is backup in case code below fails.
        double payloadMean = 0.0d;
        for (int i=0; i < payload.length; i++){ // this can be made into a for-each loop, but it's not being used so no point.
            payloadMean += payload[i];
        }
        payloadMean /= payload.length;
        */

        return (double) getLaunchWeight() / (double) payload.length; // coupled + unsure if its safe to cast this
    }

    //Initiates a for loop which iterates through every element and assigns it to payloadMax if the payload element is larger
    public int getMaxWeight(){

        int payloadMax = 0;
        //for-each loop; we are iterating through each element to run the if statement + makes the code neater
        for (int i : payload) {
            if (payloadMax < i) {
                payloadMax = i;
            }
        }

        return payloadMax;
    }

    //initiates a for loop to iterate through every element and assign it to payloadMin if payload element is smaller
    public int getMinWeight(){

        int payloadMin = payload[0];
        for (int i : payload) {
            if (payloadMin > i) {
                payloadMin = i;
            }
        }

        return payloadMin;
    }
}

